name: Build Extension

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version number
        id: version
        shell: pwsh
        run: |
          $version = "1.0.$env:GITHUB_RUN_NUMBER"
          echo "VERSION=$version" >> $env:GITHUB_ENV
          "tag=v$version" >> $env:GITHUB_OUTPUT
          "filename=MonokaiVibrantAmped.vsix" >> $env:GITHUB_OUTPUT

      - name: Update version in .vsixmanifest
        shell: pwsh
        run: |
          (Get-Content -Path "source.extension.vsixmanifest") |
            ForEach-Object { $_ -replace '1\.0\.0', "$env:VERSION" } |
            Set-Content -Path "source.extension.vsixmanifest"

      - name: Configure NuGet
        uses: nuget/setup-nuget@v1
        
      - name: Configure MsBuild
        uses: microsoft/setup-msbuild@v2
        
      - name: Restore NuGet packages
        run: nuget restore
        
      - name: Build Extension
        run: msbuild /p:configuration=Release /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.filename }}
          path: bin/Release/${{ steps.version.outputs.filename }}

      - name: Get Changelog
        id: changelog
        shell: bash
        run: |
          # Default changelog content
          changelog="- Initial release"

          if git tag --list | grep .; then
            last_tag=$(git describe --tags --abbrev=0)
            echo "Last tag found: $last_tag"
            changelog=$(git log --pretty=format:'- %s' "$last_tag"..HEAD)
          else
            echo "No tags found â€” using fallback changelog"
          fi

          # Write the changelog as a multi-line environment variable
          printf "changelog<<EOF\n%s\nEOF\n" "$changelog" >> "$GITHUB_ENV"

      - name: Create GitHub Release and Upload VSIX
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ env.VERSION }}
          body: |
            ${{ github.event.head_commit.message }}

            ## Changelog
            ${{ env.changelog }}
          files: bin/Release/${{ steps.version.outputs.filename }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
