name: Build Extension

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version number
        id: version
        shell: pwsh
        run: |
          $version = "1.0.$env:GITHUB_RUN_NUMBER"
          echo "VERSION=$version" >> $env:GITHUB_ENV
          "tag=v$version" >> $env:GITHUB_OUTPUT
          "filename=MonokaiVibrantAmped.vsix" >> $env:GITHUB_OUTPUT

      - name: Update version in .vsixmanifest
        shell: pwsh
        run: |
          (Get-Content -Path "source.extension.vsixmanifest") |
            ForEach-Object { $_ -replace '1\.0\.0', "$env:VERSION" } |
            Set-Content -Path "source.extension.vsixmanifest"

      - name: Configure NuGet
        uses: nuget/setup-nuget@v1
        
      - name: Configure MsBuild
        uses: microsoft/setup-msbuild@v2
        
      - name: Restore NuGet packages
        run: nuget restore
        
      - name: Build Extension
        run: msbuild /p:configuration=Release /p:DeployExtension=false /p:ZipPackageCompressionLevel=normal

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.filename }}
          path: bin/Release/${{ steps.version.outputs.filename }}

      - name: Find last release tag
        id: last-tag
        shell: bash
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Get commit changelog since last release
        id: changelog
        shell: bash
        run: |
          if [[ -n "${{ steps.last-tag.outputs.last_tag }}" ]]; then
            CHANGELOG=$(git log --pretty=format:'- %s' ${{ steps.last-tag.outputs.last_tag }}..HEAD)
          else
            CHANGELOG="- Initial release"
          fi
          echo "changelog<<EOF" >> $GITHUB_ENV
          printf "%s\n" "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release and Upload VSIX
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ env.VERSION }}
          body: |
            ${{ github.event.head_commit.message }}

            ## Changelog
            ${{ env.changelog }}
          files: bin/Release/${{ steps.version.outputs.filename }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
